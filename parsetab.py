
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CASE COLON DIVIDE END EQ GE GT IDENTIFIER LE LPAREN LT MINUS NEQ NUMBER PLUS RPAREN TIMES WHEN\n    switch_statement : CASE expression COLON when_clauses END\n    \n    when_clauses : when_clause when_clauses\n                 | empty\n    \n    when_clause : WHEN expression COLON statements\n    \n    statements : statement statements\n               | empty\n    \n    statement : expression\n    \n    expression : NUMBER\n               | IDENTIFIER\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | LPAREN expression RPAREN\n               | expression EQ expression\n               | expression NEQ expression\n               | expression LT expression\n               | expression LE expression\n               | expression GT expression\n               | expression GE expression\n    \n    empty :\n    '
    
_lr_action_items = {'CASE':([0,],[2,]),'$end':([1,34,],[0,-1,]),'NUMBER':([2,4,5,6,8,9,10,11,12,13,14,15,16,17,22,23,24,25,26,27,28,29,30,31,32,33,37,38,40,],[4,-8,-9,4,4,4,4,4,4,4,4,4,4,4,4,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,4,-7,4,]),'IDENTIFIER':([2,4,5,6,8,9,10,11,12,13,14,15,16,17,22,23,24,25,26,27,28,29,30,31,32,33,37,38,40,],[5,-8,-9,5,5,5,5,5,5,5,5,5,5,5,5,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,5,-7,5,]),'LPAREN':([2,4,5,6,8,9,10,11,12,13,14,15,16,17,22,23,24,25,26,27,28,29,30,31,32,33,37,38,40,],[6,-8,-9,6,6,6,6,6,6,6,6,6,6,6,6,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,6,-7,6,]),'COLON':([3,4,5,23,24,25,26,27,28,29,30,31,32,33,36,],[7,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,37,]),'PLUS':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[8,-8,-9,8,8,8,8,8,8,8,8,8,8,8,-14,8,8,]),'MINUS':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[9,-8,-9,9,9,9,9,9,9,9,9,9,9,9,-14,9,9,]),'TIMES':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[10,-8,-9,10,10,10,10,10,10,10,10,10,10,10,-14,10,10,]),'DIVIDE':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[11,-8,-9,11,11,11,11,11,11,11,11,11,11,11,-14,11,11,]),'EQ':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[12,-8,-9,12,12,12,12,12,12,12,12,12,12,12,-14,12,12,]),'NEQ':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[13,-8,-9,13,13,13,13,13,13,13,13,13,13,13,-14,13,13,]),'LT':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[14,-8,-9,14,14,14,14,14,14,14,14,14,14,14,-14,14,14,]),'LE':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[15,-8,-9,15,15,15,15,15,15,15,15,15,15,15,-14,15,15,]),'GT':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[16,-8,-9,16,16,16,16,16,16,16,16,16,16,16,-14,16,16,]),'GE':([3,4,5,18,23,24,25,26,27,28,29,30,31,32,33,36,38,],[17,-8,-9,17,17,17,17,17,17,17,17,17,17,17,-14,17,17,]),'RPAREN':([4,5,18,23,24,25,26,27,28,29,30,31,32,33,],[-8,-9,33,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,]),'WHEN':([4,5,7,20,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,],[-8,-9,22,22,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,-21,-7,-4,-21,-6,-5,]),'END':([4,5,7,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,37,38,39,40,41,42,],[-8,-9,-21,34,-21,-3,-10,-11,-12,-13,-15,-16,-17,-18,-19,-20,-14,-2,-21,-7,-4,-21,-6,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'switch_statement':([0,],[1,]),'expression':([2,6,8,9,10,11,12,13,14,15,16,17,22,37,40,],[3,18,23,24,25,26,27,28,29,30,31,32,36,38,38,]),'when_clauses':([7,20,],[19,35,]),'when_clause':([7,20,],[20,20,]),'empty':([7,20,37,40,],[21,21,41,41,]),'statements':([37,40,],[39,42,]),'statement':([37,40,],[40,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> switch_statement","S'",1,None,None,None),
  ('switch_statement -> CASE expression COLON when_clauses END','switch_statement',5,'p_switch_statement','switch.py',57),
  ('when_clauses -> when_clause when_clauses','when_clauses',2,'p_when_clauses','switch.py',62),
  ('when_clauses -> empty','when_clauses',1,'p_when_clauses','switch.py',63),
  ('when_clause -> WHEN expression COLON statements','when_clause',4,'p_when_clause','switch.py',68),
  ('statements -> statement statements','statements',2,'p_statements','switch.py',73),
  ('statements -> empty','statements',1,'p_statements','switch.py',74),
  ('statement -> expression','statement',1,'p_statement','switch.py',79),
  ('expression -> NUMBER','expression',1,'p_expression','switch.py',84),
  ('expression -> IDENTIFIER','expression',1,'p_expression','switch.py',85),
  ('expression -> expression PLUS expression','expression',3,'p_expression','switch.py',86),
  ('expression -> expression MINUS expression','expression',3,'p_expression','switch.py',87),
  ('expression -> expression TIMES expression','expression',3,'p_expression','switch.py',88),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','switch.py',89),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','switch.py',90),
  ('expression -> expression EQ expression','expression',3,'p_expression','switch.py',91),
  ('expression -> expression NEQ expression','expression',3,'p_expression','switch.py',92),
  ('expression -> expression LT expression','expression',3,'p_expression','switch.py',93),
  ('expression -> expression LE expression','expression',3,'p_expression','switch.py',94),
  ('expression -> expression GT expression','expression',3,'p_expression','switch.py',95),
  ('expression -> expression GE expression','expression',3,'p_expression','switch.py',96),
  ('empty -> <empty>','empty',0,'p_empty','switch.py',101),
]
